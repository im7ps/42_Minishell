/////////////////////////////////////////////////
IMPORTANTE FILLMV DI SPLIT VARIANT NON CANCELLARE

char	**fill_mv(const char *s, char *c, char	**matrix, int num_w)
{
	int	i;
	int	j;
	int	len;
	int	quotes;
	int	qcount;

	i = 0;
	j = 0;
	len = 0;
	quotes = 0;
	qcount = 0;
	//me lo manda in segfault, devo gestire l operatore come primo argomento del comando
	if (s[0] == '>')
	{
		if (s[1] == '>')
			matrix[0] = ft_strjoin(matrix[0], ">>", 0);
		else if (s[1] == ' ')
			matrix[0] = ft_strjoin(matrix[0], ">", 0);
		j++;
	}
	else if (s[0] == '<')
	{
		if (s[1] == '<')
			return (NULL);
		else if (s[1] == ' ')
			matrix[0] = ft_strjoin(matrix[0], "<", 0);
		j++;
	}
	///////////////////////////////////////////////

	while (j < num_w)									//il numero di volte che la stringa deve essere splittata
	{
		while ((s[i] == c[0] || s[i] == c[1] || s[i] == c[2]))		//l inizio della stringa potrebbe essere piena di caratteri che ti indicano che devi splittare...ma sei all'inizio della stringa, ignorali!
				i++;
		while (s[i + len] != '\0')	//conta da quanti char e' composta la stringa da iniettare, info sul motivo di (i + len) in basso
		{			
			if (s[i + len] == 34 || s[i + len] == 39)
			{
				quotes = ft_is_escaped(s[i + len], 0);
				if (quotes > 0)
					qcount++;
				else if (quotes < 0)
					qcount--;
			}
			if ((s[i + len] == c[0] || s[i + len] == c[1] || s[i + len] == c[2]) && qcount == 0)
			{
				if (s[i + len + 1] == c[0] || s[i + len + 1] == c[1] || s[i + len + 1] == c[2])
				{
					len++;
				}
				break ;
			}
			len++;
		}
		if (len != 0)									//se hai 0 char che ti indicano il punto di troncamento vuol dire che non devi troncare mai la stringa, in caso contrario...
		{
			while (s[i] == ' ')
			{
				s++;
				len--;
			}
			matrix[j] = ft_substr(s, i, len);			//...usa substring per iniettare la stringa dentro la riga j-esima della matrice
			j++;
		}
		i += len;								//i + len e' il trick per evitare di ricominciare la ricerca ogni volta dall inizio della stringa anziche' ricominciare dal char dopo il troncamento
		len = 0;
	}
	return (matrix);
}
/////////////////////////////////////////////////

char	*ft_quotes_eraser(char *cmd)
{
	int		i;
	int		j;
	int		quotes_c;
	char	*clean_cmd;

	quotes_c = 0;
	clean_cmd = (char *) malloc (sizeof(char) * (ft_strlen(cmd) + 1));
	i = 0;
	j = 0;
	while (cmd[i])
	{
		quotes_c = ft_is_escaped(cmd[i], 0);
		if (quotes_c == 0)
		{
			clean_cmd[j] = cmd[i];
			j++;
		}
		i++;
	}
	clean_cmd[j] = '\0';
	free(cmd);
	return (clean_cmd);
}

char	ft_choose_att(char	*str)
{
	int		i;
	int		len;
	char	type;
	int		toggle;

	i = 0;
	toggle = 0;
	len = ft_strlen(str);
	if (str[0] != '-' && str[0] != '\'' && str[i] != '"')
	{
		type = 'a';
		return (type);
	}
	else if (str[i] == '\'')
	{
		toggle = 1;
		while(str[i] == '\'')
			i++;
	}
	else if (str[i] == '"')
	{
		toggle = 2;
		while(str[i] == '"')
			i++;
	}
	else if (str[i] == ' ')
	{
		while(str[i] == ' ')
			i++;
	}
	if (str[i] == '-')
	{
		if (i + 1 < len)
		{
			i++;
			if (str[i] == 'n')
			{
				while (str[i])
				{
					if (str[i] != 'n')
					{
						if ((str[i] == ' ' && i == len - 1))
						{
							type = 'f';
							return (type);
						}
						type = 'a';
						return (type);
					}
					i++;
				}
			}
			else
			{
				type = 'a';
				return (type);
			}
		}
		else
		{
			//ft_printf("last char is -\n");
			type = 'a';
			return (type);
		}
			
	}
	type = 'f';
	return (type);
}

void	ft_set_attributes(t_minishell **minip)
{
	t_minishell *mini;
	int			i;
	int			j;
	int			len;
	char		type;
	
	i = 0;
	//len = ft_count_rows((*minip)->cmd_list->cmd_m);
	//mini->cmd_list->flags = (char **) malloc (sizeof(char *) * len);
	mini = *minip;
	while (mini->cmd_list)
	{
		mini->cmd_list->name = mini->cmd_list->cmd_m[0];
		ft_printf("NAME %s\n", mini->cmd_list->name);
		i = 1;
		j = 0;
		while (mini->cmd_list->cmd_m[i])
		{
			//differenziare se flag o argomento con una flag
			type = ft_choose_att(mini->cmd_list->cmd_m[i]);
			if (type == 'f' && i < len - 1)
			{
				mini->cmd_list->flags = mini->cmd_list->cmd_m[i];
				j++;
			}
			else if (type == 'a' && i < len - 1)
			ft_printf("ATTR %s\n", mini->cmd_list->cmd_m[i]);
			i++;
		}
		ft_printf("ENDER %s\n", mini->cmd_list->cmd_m[i - 1]);
		mini->cmd_list = mini->cmd_list->next;
	}
}































